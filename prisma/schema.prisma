generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "omitApi"] // ! experimental
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// * Inget string defaultnya adalah db.text

model User {
  id         String    @id @default(cuid()) @db.VarChar(30)
  username   String    @unique @db.VarChar(255)
  email      String    @unique @db.VarChar(320)
  password   String?   @db.VarChar(255)
  role       Roles     @default(USER)
  isOauth    Boolean
  lastLogin  DateTime?
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  profile        Profile?
  notes          Note[]
  notePermission NotePermission[]
  followers      Follow[]         @relation("FollowerRelation")
  followings     Follow[]         @relation("FollowingRelation")
  upvotedNotes   UpvotedNote[]
  downvoteNotes  DownvoteNote[]
  savedNotes     SavedNote[]
  NoteEditor     NoteEditor?
  FavoriteNote   FavoriteNote[]

  @@index([username, email])
}

model Profile {
  id           String   @id @default(cuid()) @db.VarChar(30)
  userId       String   @unique @db.VarChar(30)
  firstName    String   @default("") @db.VarChar(255)
  lastName     String   @default("") @db.VarChar(255)
  age          Int?     @db.SmallInt // * More small but fit for age field (they said)
  phone        String   @default("") @db.VarChar(15)
  profileImage String   @default("") @db.VarChar(1024)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Follow {
  followerId  String @db.VarChar(30)
  followingId String @db.VarChar(30)

  follower  User @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  // * Unique untuk beberapa field secara bersamaan
  @@unique([followerId, followingId])
  @@index([followerId, followingId])
}

// ! INGET KALO CONSTRAINT ITU NYAMBUNG KE TABLE YANG LAIN
// ! HARUS HATI-HATI PAKE unique, index, id, onDelete, dan onUpdate
model Note {
  id             String   @id @default(cuid()) @db.VarChar(30)
  userId         String   @default("deleted user") @db.VarChar(30)
  title          String   @db.VarChar(255)
  content        String
  isPrivate      Boolean  @default(false)
  isDeleted      Boolean  @default(false)
  isArchived     Boolean  @default(false)
  upvotedCount   Int      @default(0)
  downvotedCount Int      @default(0)
  savedCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: SetDefault)
  noteEditor      NoteEditor?
  tags            Tag[]
  notePermission  NotePermission[]
  upvotedNotes    UpvotedNote[]
  downvoteNotes   DownvoteNote[]
  savedNotes      SavedNote[]
  noteAttachments NoteAttachment[]
  FavoriteNote    FavoriteNote[]

  @@index([userId, title])
}

model NoteEditor {
  userId    String   @unique @db.VarChar(30)
  noteId    String   @unique @db.VarChar(30)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@id([userId, noteId])
  @@index([userId, noteId])
}

// * Karena tidak ada operasi update makanya ngak ada updatedAt
model UpvotedNote {
  userId    String   @db.VarChar(30)
  noteId    String   @db.VarChar(30)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@id([userId, noteId])
  @@unique([userId, noteId])
  @@index([userId, noteId])
}

model DownvoteNote {
  userId    String   @db.VarChar(30)
  noteId    String   @db.VarChar(30)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@id([userId, noteId])
  @@unique([userId, noteId])
  @@index([userId, noteId])
}

model SavedNote {
  userId    String   @db.VarChar(30)
  noteId    String   @db.VarChar(30)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@id([userId, noteId])
  @@unique([userId, noteId])
  @@index([userId, noteId])
}

model FavoriteNote {
  userId    String   @db.VarChar(30)
  noteId    String   @db.VarChar(30)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@id([userId, noteId])
  @@unique([userId, noteId])
  @@index([userId, noteId])
}

model NotePermission {
  userId     String     @db.VarChar(30)
  noteId     String     @db.VarChar(30)
  permission Permission @default(READ)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, noteId])
  @@unique([userId, noteId])
  @@index([userId, noteId])
}

model NoteAttachment {
  id           String   @id @default(cuid()) @db.VarChar(30)
  noteId       String
  fieldname    String
  originalname String
  mimetype     String
  size         Int
  destination  String
  filename     String
  path         String
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @unique @db.VarChar(255)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notes Note[]

  @@index([name])
}

enum Roles {
  USER
  ADMIN
}

enum Permission {
  READ
  READ_WRITE
}
